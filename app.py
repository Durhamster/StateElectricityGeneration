import dash_bootstrap_components as dbc
import pandas as pd
import plotly.graph_objs as go

from dash import Dash, dcc, html
from dash.dependencies import Input, Output

# Bootstrap Theme
# More themes can be found here: https://dash-bootstrap-components.opensource.faculty.ai/docs/themes/explorer/
external_stylesheets = [dbc.themes.LITERA]

app = Dash(
    __name__,
    meta_tags=[
        {
            "name": "viewport",
            "content": "width=device-width, initial-scale=1.0, maximum-scale=1.2, minimum-scale=0.5",
        }
    ],
    title="Electricity Generation By State",
    external_stylesheets=external_stylesheets,
)

server = app.server

app.config.suppress_callback_exceptions = True


# Data
df = pd.read_excel("data/electricity_generation.xlsx", sheet_name="2019").sort_values(
    by=["STATE"], axis=0, ascending=True
)

# Bar graph
df_pivot = pd.pivot_table(df, index="STATE", aggfunc="sum")
top10_df = df_pivot["GENERATION (Megawatthours)"].nlargest(n=10).reset_index()
top10_df["GENERATION (Megawatthours)"] = top10_df["GENERATION (Megawatthours)"].apply(
    lambda x: "{:,}".format(x)
)

top10_bargraph = dict(
    data=[
        go.Bar(
            x=top10_df["STATE"],
            y=top10_df["GENERATION (Megawatthours)"],
            text=top10_df["GENERATION (Megawatthours)"],
            marker_color="#50C878",
        )
    ],
    layout=dict(
        bargap=0.10,
        dragmode=False,
        paper_bgcolor="#2c3a47",
        plot_bgcolor="#2c3a47",
        tickformat=",d",
        autosize=True,
        height=700,
        font=dict(family="Arial", size=12, color="white"),
        margin=dict(l=5, r=5, b=25, t=5, pad=0),
        yaxis={"visible": False, "showticklabels": False},
    ),
)

# For the drop down menu
state_options = df["STATE (FULL NAME)"].unique()


# Layout of the App
app.layout = html.Div(
    [
        # Main Container
        dbc.Container(
            [
                dbc.Row(
                    html.H2(
                        "Electricity Generated by Source (in Megawatthours) - 2019",
                        className="mt-2",
                    ),
                ),
                dbc.Row(
                    dcc.Dropdown(
                        className="dropdown",
                        id="STATE",
                        options=[{"label": i, "value": i} for i in state_options],
                        value="All States",
                        clearable=False,
                        searchable=False,
                    ),
                ),
                html.H3(id="state_title", className="d-flex justify-content-center"),
                dbc.Spinner(
                    html.Div(
                        [
                            dcc.Graph(
                                id="pie-graph",
                                className="piegraph",
                                config={"displayModeBar": False},
                            ),
                        ],
                        className="d-flex justify-content-center",
                    ),
                    color="primary",
                ),
                dbc.Row(
                    html.H2(
                        "Top Generating States (in Megawatthours) - 2019",
                        className="mt-2",
                    ),
                ),
                dbc.Row(
                    dbc.Spinner(
                        html.Div(
                            [
                                dcc.Graph(
                                    id="top10-graph",
                                    figure=top10_bargraph,
                                    className="bargraph",
                                    config={"displayModeBar": False},
                                )
                            ],
                            className="d-flex justify-content-center",
                        ),
                        color="primary",
                    ),
                ),
                dbc.Row(
                    html.Label(
                        [
                            "Source: ",
                            html.A(
                                "U.S. Energy Information Administration",
                                href="https://www.eia.gov/electricity/data/state/",
                                target="blank",
                            ),
                        ],
                    ),
                    id="source-link",
                ),
                dbc.Row(
                    html.Label(
                        [
                            "Code: ",
                            html.A(
                                "GitHub Repo For This Project",
                                href="https://github.com/Durhamster/StateElectricityGeneration",
                                target="blank",
                            ),
                        ],
                    ),
                    id="github-repo-link",
                ),
                dbc.Row(
                    html.Label(
                        [
                            "Favicon: ",
                            html.A(
                                "Lightning Icon by Icons8",
                                href="https://icons8.com/icon/2zdHzavrzFAo/lightning",
                                target="blank",
                            ),
                        ],
                    ),
                    id="favicon_credit",
                ),
            ]
        )  # End of Main Container
    ],
    className="loading",
)

# Call back functions
@app.callback(
    Output("pie-graph", "figure"),
    Output("state_title", "children"),
    [Input("STATE", "value")],
)
def update_graph(state):
    if state == "All States":
        df_plot = df.copy()
    else:
        df_plot = df[df["STATE (FULL NAME)"] == state]

    # Clean data so slices under 1% do not appear
    pv = pd.pivot_table(
        df_plot,
        index=["ENERGY SOURCE"],
        values=["GENERATION (Megawatthours)"],
        aggfunc=sum,
        fill_value=0,
    ).reset_index()

    # Combines all sources under 1% into 'Other'
    # Find total megawatthours and which sources are 1% for selected state
    total_megawatthours = pv["GENERATION (Megawatthours)"].sum(axis=0, skipna=True)
    one_percent = total_megawatthours * 0.01
    pv.loc[pv["GENERATION (Megawatthours)"] <= one_percent, "ENERGY SOURCE"] = "Other"
    pv.sort_values(by=["ENERGY SOURCE"], inplace=True)

    # Set colors based on energy source
    pv.loc[pv["ENERGY SOURCE"] == "Coal", "PIE COLOR"] = "#808080"
    pv.loc[pv["ENERGY SOURCE"] == "Geothermal", "PIE COLOR"] = "#FF0000"
    pv.loc[pv["ENERGY SOURCE"] == "Hydroelectric Conventional", "PIE COLOR"] = "#1F618D"
    pv.loc[pv["ENERGY SOURCE"] == "Natural Gas", "PIE COLOR"] = "#e66c51"
    pv.loc[pv["ENERGY SOURCE"] == "Nuclear", "PIE COLOR"] = "#FFBF00"
    pv.loc[pv["ENERGY SOURCE"] == "Other", "PIE COLOR"] = "#EADDCA"
    pv.loc[pv["ENERGY SOURCE"] == "Other Biomass", "PIE COLOR"] = "#1A4314"
    pv.loc[pv["ENERGY SOURCE"] == "Other Gasses", "PIE COLOR"] = "#EADDCA"
    pv.loc[pv["ENERGY SOURCE"] == "Petroleum", "PIE COLOR"] = "#FFFFFF"
    pv.loc[pv["ENERGY SOURCE"] == "Pumped Storage", "PIE COLOR"] = "#EADDCA"
    pv.loc[
        pv["ENERGY SOURCE"] == "Solar Thermal and Photovoltaic", "PIE COLOR"
    ] = "#DE425B"
    pv.loc[pv["ENERGY SOURCE"] == "Wind", "PIE COLOR"] = "#488F31"
    pv.loc[
        pv["ENERGY SOURCE"] == "Wood and Wood Derived Fuels", "PIE COLOR"
    ] = "#942525"

    # Pie Chart
    pie_chart = dict(
        data=[
            go.Pie(
                labels=pv["ENERGY SOURCE"],
                values=pv["GENERATION (Megawatthours)"],
                textfont_size=18,
                marker=dict(
                    colors=pv["PIE COLOR"],
                ),
                sort=False,
            )
        ],
        layout=dict(
            autosize=True,
            margin=dict(l=0, r=0, b=40, t=75, pad=0),
            dragmode=False,
            paper_bgcolor="#2c3a47",
            plot_bgcolor="#2c3a47",
            font=dict(family="Arial", size=12, color="white"),
            legend=dict(
                orientation="h",
                traceorder="normal",
            ),
        ),
    )

    return pie_chart, state


if __name__ == "__main__":
    # Development
    # app.run_server(host="127.0.0.1", debug=True)
    # Production
    app.run_server(debug=False)
